"""
Django settings for researchhub project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import sys

import requests
import sentry_sdk
import stripe
from celery.task.schedules import crontab
from corsheaders.defaults import default_headers
from sentry_sdk.integrations.django import DjangoIntegration
from web3 import Web3

from utils.sentry import log_error

APP_ENV = os.environ.get("APP_ENV") or "development"
DEVELOPMENT = "development" in APP_ENV
PRODUCTION = "production" in APP_ENV
STAGING = "staging" in APP_ENV
CELERY_WORKER = os.environ.get("CELERY_WORKER", False)
ELASTIC_APM_OFF = os.environ.get("ELASTIC_APM_OFF", False)
NO_ELASTIC = os.environ.get("NO_ELASTIC")

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

CI = "GITHUB_ACTIONS" in os.environ
CLOUD = PRODUCTION or STAGING or CI
TESTING = ("test" in APP_ENV) or ("test" in sys.argv) or (APP_ENV == "test")
PYTHONPATH = "/var/app/current:$PYTHONPATH"
DJANGO_SETTINGS_MODULE = "researchhub.settings"
ELASTIC_BEANSTALK = APP_ENV in ["production", "staging", "development"]
USE_SILK = os.environ.get("USE_SILK", False)
CONFIG = os.environ.get("CONFIG")

if CLOUD or CONFIG:
    CONFIG_BASE_DIR = "config"
    from config import db, keys, twitter
else:
    CONFIG_BASE_DIR = "config_local"
    from config_local import db, keys, twitter

if DEVELOPMENT or TESTING:
    BASE_FRONTEND_URL = "http://localhost:3000"
elif PRODUCTION:
    BASE_FRONTEND_URL = "https://researchhub.com"
elif CLOUD:
    BASE_FRONTEND_URL = "https://staging-web.researchhub.com"

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# Django Debug Toolbar
USE_DEBUG_TOOLBAR = os.environ.get("USE_DEBUG_TOOLBAR", False)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", keys.SECRET_KEY)

# python manage.py check --deploy
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
if not (PRODUCTION or STAGING):
    DEBUG = True

ALLOWED_HOSTS = [
    ".elasticbeanstalk.com",
    ".quantfive.org",
    ".researchhub-web-researchhub.vercel.app",
    ".researchhub-web-staging.vercel.app",
    ".researchhub.com",
    "127.0.0.1",  # localhost
    "localhost",
    "researchhub-web-researchhub.vercel.app",
    r"^https:\/\/(\w)*[-]*(researchhub+)([-](\w)*)*(.vercel.app){1}/",
    r"https:\/\/(\w)*[-]*(researchhub+)([-](\w)*)*(.vercel.app){1}",
    r"researchhub(-[0-9]?)\.ngrok\.io",
]

if not (PRODUCTION or STAGING):
    ALLOWED_HOSTS += [".ngrok.io", "localhost", "10.0.2.2", "10.0.3.2"]

if ELASTIC_BEANSTALK:
    # This is for health checks
    try:
        EC2_METADATA_HEADERS = {"X-aws-ec2-metadata-token-ttl-seconds": "21600"}

        EC2_METADATA_TOKEN = requests.put(
            "http://169.254.169.254/latest/api/token",
            timeout=0.01,
            headers=EC2_METADATA_HEADERS,
        ).text

        EC2_METADATA_TOKEN_HEADER = {"X-aws-ec2-metadata-token": EC2_METADATA_TOKEN}

        ALLOWED_HOSTS.append(
            requests.get(
                "http://169.254.169.254/latest/meta-data/local-ipv4",
                timeout=0.01,
                headers=EC2_METADATA_TOKEN_HEADER,
            ).text
        )
        # ALLOWED_HOSTS.append(
        #     requests.get('http://172.31.19.162/latest/meta-data/local-ipv4',
        #                  timeout=0.01).text
        # )
        # ALLOWED_HOSTS.append(
        #     requests.get('http://54.200.83.4/latest/meta-data/local-ipv4',
        #                  timeout=0.01).text
        # )
        # # Production private ips
        # ALLOWED_HOSTS.append(
        #     requests.get('http://172.31.0.82/latest/meta-data/local-ipv4',
        #                  timeout=0.01).text
        # )
        # ALLOWED_HOSTS.append(
        #     requests.get('http://172.31.9.43/latest/meta-data/local-ipv4',
        #                  timeout=0.01).text
        # )
        # # Staging private ips
        # ALLOWED_HOSTS.append(
        #     requests.get('http://172.31.8.17/latest/meta-data/local-ipv4',
        #                  timeout=0.01).text
        # )
        # ALLOWED_HOSTS.append(
        #     requests.get('http://172.31.6.81/latest/meta-data/local-ipv4',
        #                  timeout=0.01).text
        # )
        # ALLOWED_HOSTS.append(
        #     requests.get('http://172.31.5.32/latest/meta-data/local-ipv4',
        #                  timeout=0.01).text
        # )

    except requests.exceptions.RequestException:
        pass

CORS_ALLOW_HEADERS = (
    *default_headers,
    "X-organization-id",
)

# Cors
CORS_ORIGIN_WHITELIST = [
    "http://localhost:3000",
    "http://localhost:3003",
    "http://localhost:3005",
    "https://localhost:3000",
    "https://dev.researchhub.com",
    "https://researchnow.researchhub.com",
    "https://www.researchhub.com",
    "https://staging-web.researchhub.com",
    "https://staging-web2.researchhub.com",
    "https://researchhub.com",
    "http://10.0.2.2:3000",
    "https://word.researchhub.com",
]

CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https:\/\/(\w)*[-]*(researchhub+)([-](\w)*)*(.vercel.app){1}",
    r"^https:\/\/(\w)*[-]*(researchhub+)([-](\w)*)*(.vercel.app){1}/",
]


# Application definition

INSTALLED_APPS = [
    # Daphne needs to be first
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.sites",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "django_filters",
    # https://github.com/django-extensions/django-extensions
    "django_extensions",
    # CORS
    "corsheaders",
    # Postgres
    "django.contrib.postgres",
    # Rest framework
    "rest_framework",
    "rest_framework_api_key",
    # Authentication
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.orcid",
    "allauth.socialaccount.providers.linkedin_oauth2",
    "rest_framework.authtoken",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    # Storage
    "storages",
    # Search
    "django_elasticsearch_dsl",
    "django_elasticsearch_dsl_drf",
    # Emails
    "django_ses",
    "django_inlinecss",
    # Channels
    "channels",
    # Django Celery Results
    "django_celery_results",
    # MJML
    "mjml",
    # Custom apps
    "analytics",
    "bullet_point",
    "citation",
    "discussion",
    "ethereum",
    "google_analytics",
    "hub",
    "hypothesis",
    "invite",
    "mailing_list",
    "note",
    "notification",
    "oauth",
    "paper",
    "profiler",
    "purchase",
    "reputation",
    "researchhub_case",
    "researchhub_comment",
    "researchhub_document",
    "researchhub_access_group",
    "search",
    "summary",
    "tag",
    "user",
    "new_feature_release",
    "peer_review",
    "referral",
    "review",
]

SITE_ID = 1

MIDDLEWARE = [
    "django.middleware.gzip.GZipMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "researchhub.middleware.csrf_disable.DisableCSRF",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# if not TESTING:
#     MIDDLEWARE.append('profiler.middleware.profiler.ProfileMiddleware')

if USE_DEBUG_TOOLBAR:
    INSTALLED_APPS += ["debug_toolbar"]
    MIDDLEWARE += ["debug_toolbar.middleware.DebugToolbarMiddleware"]
    INTERNAL_IPS = [
        "127.0.0.1",
    ]

if USE_SILK:
    INSTALLED_APPS += ["silk", "dbbackup"]

    MIDDLEWARE += [
        "silk.middleware.SilkyMiddleware",
    ]

    DBBACKUP_STORAGE = "django.core.files.storage.FileSystemStorage"
    DBBACKUP_STORAGE_OPTIONS = {"location": "backups"}
    SILKY_META = True
    SILKY_ANALYZE_QUERIES = True
    SILKY_EXPLAIN_FLAGS = {"format": "JSON", "costs": True}
    SILKY_PYTHON_PROFILER = True

    def silky_capture(request):
        return "test_get_unified_documents" in request.path

    SILKY_PYTHON_PROFILER_FUNC = silky_capture

ROOT_URLCONF = "researchhub.urls"

FILE_UPLOAD_MAX_MEMORY_SIZE = 26214400 * 24.1  # ~655MB max data allowed

PAGINATION_PAGE_SIZE = 10

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "researchhub.middleware.ApiTokenSession.UserApiTokenAuth",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
        # 'rest_framework.permissions.AllowAny',  # FOR TESTING ONLY
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": PAGINATION_PAGE_SIZE,
    "TEST_REQUEST_RENDERER_CLASSES": [
        "rest_framework.renderers.MultiPartRenderer",
        "rest_framework.renderers.JSONRenderer",
        "utils.renderers.PlainTextRenderer",
    ],
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "50/minute",
    },
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
}


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "researchhub.wsgi.application"


# Authentication

AUTH_USER_MODEL = "user.User"

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
)

OAUTH_METHOD = "token"

REST_AUTH_REGISTER_SERIALIZERS = {
    "REGISTER_SERIALIZER": "user.serializers.RegisterSerializer",
}

REST_AUTH_SERIALIZERS = {
    "PASSWORD_RESET_SERIALIZER": "user.custom_allauth.CustomPasswordResetSerializer"
}


# Django AllAuth setup
# https://django-allauth.readthedocs.io/en/latest/configuration.html

ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_ADAPTER = "user.custom_allauth.CustomAccountAdapter"
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = False
if STAGING or PRODUCTION:
    ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"
LOGIN_REDIRECT_URL = "http://localhost:3000/orcid"
LINKEDIN_CALLBACK_URL = "http://localhost:3005/linkedin-login"
if STAGING:
    LOGIN_REDIRECT_URL = "https://staging-web.researchhub.com/orcid"
if PRODUCTION:
    LOGIN_REDIRECT_URL = "https://researchhub.com/orcid"
    LINKEDIN_CALLBACK_URL = "https://www.researchhub.com/linkedin-login"
SOCIALACCOUNT_ADAPTER = "oauth.adapters.SocialAccountAdapter"
SOCIALACCOUNT_EMAIL_VERIFICATION = "none"
SOCIALACCOUNT_EMAIL_REQUIRED = False
SOCIALACCOUNT_QUERY_EMAIL = True

SOCIALACCOUNT_PROVIDERS = {
    "linkedin_oauth2": {
        "APP": {
            "client_id": os.environ.get("LINKEDIN_CLIENT_ID", keys.LINKEDIN_CLIENT_ID),
            "secret": os.environ.get(
                "LINKEDIN_CLIENT_SECRET", keys.LINKEDIN_CLIENT_SECRET
            ),
            "key": os.environ.get(
                "LINKEDIN_CLIENT_ID", keys.LINKEDIN_CLIENT_ID
            ),  # This is equal to the client_id
        }
    },
    "orcid": {
        # Defaults to 'orcid.org' for the production API
        "BASE_DOMAIN": "orcid.org",
        "MEMBER_API": False,  # Defaults to False for the Public API
        "CLIENT_ID": os.environ.get("ORCID_CLIENT_ID", keys.ORCID_CLIENT_ID),
        "CLIENT_SECRET": os.environ.get(
            "ORCID_CLIENT_SECRET", keys.ORCID_CLIENT_SECRET
        ),
        # not expiring for approximately 20 years
        "ACCESS_TOKEN": os.environ.get("ORCID_ACCESS_TOKEN", keys.ORCID_ACCESS_TOKEN),
        "REFRESH_TOKEN": "",
    },
}

GOOGLE_REDIRECT_URL = "http://localhost:8000/auth/google/login/callback/"
LINKEDIN_REDIRECT_URL = "http://localhost:8000/auth/"
GOOGLE_YOLO_REDIRECT_URL = "http://localhost:8000/auth/google/yolo/callback/"
if PRODUCTION:
    GOOGLE_REDIRECT_URL = "https://backend.researchhub.com/auth/google/login/callback/"
    GOOGLE_YOLO_REDIRECT_URL = (
        "https://backend.researchhub.com/auth/google/yolo/callback/"
    )
if STAGING:
    GOOGLE_REDIRECT_URL = (
        "https://staging-backend.researchhub.com/auth/google/login/callback/"
    )
    GOOGLE_YOLO_REDIRECT_URL = (
        "https://staging-backend.researchhub.com/auth/google/yolo/callback/"
    )


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DB_NAME = os.environ.get("DB_NAME", db.NAME)
DB_HOST = os.environ.get("DB_HOST", db.HOST)
DB_PORT = os.environ.get("DB_PORT", db.PORT)
DB_USER = os.environ.get("DB_USER", db.USER)
DB_PASS = os.environ.get("DB_PASS", db.PASS)

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": DB_NAME,
        "HOST": DB_HOST,
        "PORT": DB_PORT,
        "USER": DB_USER,
        "PASSWORD": DB_PASS,
        "TEST": {
            "NAME": "test_researchhub",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation."
            "UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": ("django.contrib.auth.password_validation." "MinimumLengthValidator"),
    },
    {
        "NAME": ("django.contrib.auth.password_validation." "CommonPasswordValidator"),
    },
    {
        "NAME": ("django.contrib.auth.password_validation." "NumericPasswordValidator"),
    },
    {"NAME": ("user.validators." "SymbolValidator")},
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATICFILES_DIRS = ["stylesheets"]


# AWS

AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID", keys.AWS_ACCESS_KEY_ID)
AWS_SECRET_ACCESS_KEY = os.environ.get(
    "AWS_SECRET_ACCESS_KEY", keys.AWS_SECRET_ACCESS_KEY
)

# AWS Lambda
if DEVELOPMENT:
    LAMBDA_IPS = ["127.0.0.1", "localhost"]
else:
    LAMBDA_IPS = ["35.82.37.191", "35.83.152.234"]

AWS_SCHOLARLY_LAMBDA = (
    "arn:aws:lambda:us-west-2:794128250202:function:ResearchHub-Scholarly"
)
AWS_GHOSTSCRIPT_LAMBDA = (
    "arn:aws:lambda:us-west-2:794128250202:function:researchhub-ghostscript"
)

ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7
ACCOUNT_EMAIL_SUBJECT_PREFIX = "ResearchHub | "
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"
DEFAULT_FROM_EMAIL = "noreply@researchhub.com"

# Storage
if TESTING:
    DEFAULT_FILE_STORAGE = "django.core.files.storage.FileSystemStorage"
else:
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
AWS_QUERYSTRING_EXPIRE = 604800
AWS_STORAGE_BUCKET_NAME = os.environ.get(
    "AWS_STORAGE_BUCKET_NAME", "researchhub-paper-dev1"
)

if PRODUCTION:
    AWS_STORAGE_BUCKET_NAME = "researchhub-paper-prod"
    AWS_S3_CUSTOM_DOMAIN = "d2ogkcqdn9wsvr.cloudfront.net"

AWS_S3_REGION_NAME = "us-west-2"

AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None

# Email

AWS_SES_REGION_NAME = "us-west-2"
AWS_SES_REGION_ENDPOINT = "email.us-west-2.amazonaws.com"

EMAIL_BACKEND = "django_ses.SESBackend"
if TESTING:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

EMAIL_WHITELIST = [
    "calvinhlee@quantfive.org",
    "craig@quantfive.org",
    "joey@quantfive.org",
    "leosun@quantfive.org",
    "patrick@quantfive.org",
    "patrick.lu@berkeley.edu",
    "calvinhlee@berkeley.edu",
    "pdj7@georgetown.edu",
    "bank@researchhub.com",
    "kobeattias@gmail.com",
    "kobe@researchhub.com",
    "kobe+1@researchhub.com",
    "contact@notesalong.com",
    "patricklu@researchhub.com",
    "thomazvu@gmail.com",
    "thomas@researchhub.com",
    "pat@researchhub.com",
    "lightning.lu7@gmail.com",
    "contact@notesalong.com",
]

# Whitelist for distributing RSC
DIST_WHITELIST = [
    "pdj7@georgetown.edu",
    "patricklu@researchhub.com",
]

SIFT_MODERATION_WHITELIST = [35747]

# Sentry

SENTRY_ENVIRONMENT = APP_ENV

if PRODUCTION or STAGING:

    def before_send(event, hint):
        log_record = hint.get("log_record")
        if log_record and "Invalid HTTP_HOST header" in log_record.message:
            return None
        return event

    sentry_sdk.init(
        dsn=os.environ.get("SENTRY_DSN", keys.SENTRY_DSN),
        before_send=before_send,
        integrations=[DjangoIntegration()],
        environment=SENTRY_ENVIRONMENT,
    )

# sentry_sdk.init(
#     dsn=os.environ.get("SENTRY_DSN", keys.SENTRY_DSN),

#     # To set a uniform sample rate
#     # Set traces_sample_rate to 1.0 to capture 100%
#     # of transactions for performance monitoring.
#     # We recommend adjusting this value in production,
#     traces_sample_rate=1.0,
# )

# Search (Elastic)

ELASTICSEARCH_HOST = os.environ.get("ELASTICSEARCH_HOST", keys.ELASTICSEARCH_HOST)

ELASTICSEARCH_DSL = {
    "default": {
        "hosts": ELASTICSEARCH_HOST if ELASTICSEARCH_HOST else "http://localhost:9200",
    },
}

if PRODUCTION:
    ELASTICSEARCH_DSL = {
        "default": {
            "hosts": ELASTICSEARCH_HOST,  # noqa: E501
            "port": 443,
            "use_ssl": True,
            "max_retries": 5,
        },
    }

if STAGING:
    ELASTICSEARCH_DSL = {
        "default": {
            "hosts": ELASTICSEARCH_HOST,  # noqa: E501
            "port": 443,
            "use_ssl": True,
            "max_retries": 5,
        },
    }


ELASTICSEARCH_AUTO_REINDEX = True
ELASTICSEARCH_DSL_PARALLEL = True
ELASTICSEARCH_DSL_SIGNAL_PROCESSOR = "search.celery.CelerySignalProcessor"


# Web3
# https://web3py.readthedocs.io/en/stable/

WEB3_SHARED_SECRET = os.environ.get(
    "WEB3_SHARED_SECRET",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
)

# Mainnet
WEB3_RSC_ADDRESS = os.environ.get("WEB3_RSC_ADDRESS", keys.WEB3_RSC_ADDRESS)

# Redis
# redis://:password@hostname:port/db_number

REDIS_HOST = os.environ.get("REDIS_HOST", "localhost")
REDIS_PORT = os.environ.get("REDIS_PORT", "6379")

# Cache Settings
if TESTING:
    CACHES = {
        "default": {
            "BACKEND": "researchhub.TestCache.TestCache",
            "LOCATION": f"{REDIS_HOST}:{REDIS_PORT}",
            "KEY_PREFIX": APP_ENV,
        },
    }
else:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.redis.RedisCache",
            "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}",
            "KEY_PREFIX": APP_ENV,
        },
    }

# Celery

CELERY_BROKER_URL = "redis://{}:{}/0".format(REDIS_HOST, REDIS_PORT)
CELERY_RESULT_BACKEND = "db+postgresql://{}:{}@{}:{}/{}".format(
    DB_USER, DB_PASS, DB_HOST, DB_PORT, DB_NAME
)
CELERY_TIMEZONE = "UTC"
CELERY_RESULT_BACKEND = "django-db"
CELERY_TASK_TRACK_STARTED = True
CELERY_RESULT_EXTENDED = True
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_TASK_DEFAULT_QUEUE = "default"
CELERY_TASK_IGNORE_RESULT = True

REDBEAT_REDIS_URL = "redis://{}:{}/0".format(REDIS_HOST, REDIS_PORT)
REDBEAT_KEY_PREFIX = f"{APP_ENV}_redbeat_"

# Django Channels
ASGI_APPLICATION = "researchhub.asgi.application"
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(REDIS_HOST, REDIS_PORT)],
        },
    },
}

# Async service

if PRODUCTION:
    ASYNC_SERVICE_HOST = "http://ec2-52-37-62-135.us-west-2.compute.amazonaws.com"
elif STAGING:
    ASYNC_SERVICE_HOST = "http://ec2-52-38-164-185.us-west-2.compute.amazonaws.com"
else:
    ASYNC_SERVICE_HOST = os.environ.get("ASYNC_SERVICE_HOST", "http://localhost:8080")


# APM

elastic_token = os.environ.get("ELASTIC_APM_SECRET_TOKEN", "")
if elastic_token:
    if not CELERY_WORKER:
        INSTALLED_APPS += [
            # Monitoring
            "elasticapm.contrib.django",
        ]
    if not CELERY_WORKER and not TESTING:
        MIDDLEWARE = [
            "elasticapm.contrib.django.middleware.TracingMiddleware",
        ] + MIDDLEWARE

    ELASTIC_APM = {
        # Set required service name. Allowed characters:
        # # a-z, A-Z, 0-9, -, _, and space
        "SERVICE_NAME": f"researchhub-{APP_ENV}",
        # Use if APM Server requires a token
        "SECRET_TOKEN": os.environ.get("ELASTIC_APM_SECRET_TOKEN", ""),
        # Set custom APM Server URL (default: http://localhost:8200)
        "SERVER_URL": os.environ.get("APM_URL", keys.APM_URL),  # noqa
        "ENVIRONMENT": APP_ENV,
        "DJANGO_AUTOINSERT_MIDDLEWARE": False,
        "DISABLE_SEND": CELERY_WORKER or TESTING,
        "PROCESSORS": (
            "utils.elastic_apm.filter_processor",
            "elasticapm.processors.sanitize_stacktrace_locals",
            "elasticapm.processors.sanitize_http_request_cookies",
            "elasticapm.processors.sanitize_http_headers",
            "elasticapm.processors.sanitize_http_wsgi_env",
            "elasticapm.processors.sanitize_http_request_body",
            # Breaking in elasticapm 6.x
            # 'elasticapm.processors.sanitize_http_request_querystring',
        ),
    }

# Twitter

TWITTER_CONSUMER_KEY = os.environ.get(
    "TWITTER_CONSUMER_KEY", twitter.TWITTER_CONSUMER_KEY
)
TWITTER_CONSUMER_SECRET = os.environ.get(
    "TWITTER_CONSUMER_SECRET", twitter.TWITTER_CONSUMER_SECRET
)
TWITER_ACCESS_TOKEN = os.environ.get("TWITER_ACCESS_TOKEN", twitter.TWITER_ACCESS_TOKEN)
TWITTER_ACCESS_TOKEN_SECRET = os.environ.get(
    "TWITTER_ACCESS_TOKEN_SECRET", twitter.TWITTER_ACCESS_TOKEN_SECRET
)
TWITTER_CONSUMER_KEY_ALT = os.environ.get(
    "TWITTER_CONSUMER_KEY_ALT", twitter.TWITTER_CONSUMER_KEY_ALT
)
TWITTER_CONSUMER_SECRET_ALT = os.environ.get(
    "TWITTER_CONSUMER_SECRET_ALT", twitter.TWITTER_CONSUMER_SECRET_ALT
)
TWITER_ACCESS_TOKEN_ALT = os.environ.get(
    "TWITER_ACCESS_TOKEN_ALT", twitter.TWITER_ACCESS_TOKEN_ALT
)
TWITTER_ACCESS_TOKEN_SECRET_ALT = os.environ.get(
    "TWITTER_ACCESS_TOKEN_SECRET_ALT", twitter.TWITTER_ACCESS_TOKEN_SECRET_ALT
)

# MailChimp
MAILCHIMP_SERVER = "us4"
MAILCHIMP_LIST_ID = os.environ.get("MAILCHIMP_LIST_ID", keys.MAILCHIMP_LIST_ID)

MORALIS_API_KEY = os.environ.get("MORALIS_API_KEY", keys.MORALIS_API_KEY)

# Recaptcha
RECAPTCHA_VERIFY_URL = "https://www.google.com/recaptcha/api/siteverify"
RECAPTCHA_SECRET_KEY = os.environ.get("RECAPTCHA_SECRET_KEY", keys.RECAPTCHA_SECRET_KEY)

# Sift Science
SIFT_ACCOUNT_ID = os.environ.get("SIFT_ACCOUNT_ID", keys.SIFT_ACCOUNT_ID)
SIFT_REST_API_KEY = os.environ.get("SIFT_REST_API_KEY", keys.SIFT_REST_API_KEY)
SIFT_WEBHOOK_SECRET_KEY = os.environ.get(
    "SIFT_WEBHOOK_SECRET_KEY", keys.SIFT_WEBHOOK_SECRET_KEY
)


# Amplitude and GeoIP
AMPLITUDE_API_KEY = os.environ.get("AMPLITUDE_API_KEY", keys.AMPLITUDE_API_KEY)

if STAGING or PRODUCTION:
    GDAL_LIBRARY_PATH = "/home/ec2-user/miniconda3/lib/libgdal.so"
GEOIP_PATH = os.path.join(BASE_DIR, "analytics")

# Stripe
stripe.api_key = os.environ.get("STRIPE_API_KEY", keys.STRIPE_API_KEY)

# Reward Distribution
REWARD_TIME = os.environ.get("REWARD_TIME", "0 0 1")  # Defaults weekly

reward_time_hour, reward_time_day, reward_time_week = list(
    map(int, REWARD_TIME.split(" "))
)

if reward_time_week:
    REWARD_SCHEDULE = crontab(minute="0", hour="0", day_of_week="sunday")
elif reward_time_day:
    REWARD_SCHEDULE = crontab(minute="0", hour="0")
elif reward_time_hour:
    REWARD_SCHEDULE = crontab(minute="0", hour="*")

# GEOIP_PATH = BASE_DIR + '/utils'

# from django.contrib.gis.geoip2 import GeoIP2

# geo_ip = GeoIP2()

# Killswitch Variables
SERIALIZER_SWITCH = os.environ.get("SERIALIZER_SWITCH", True)

# CKEditor Cloud Services
CKEDITOR_CLOUD_ACCESS_KEY = os.environ.get(
    "CKEDITOR_CLOUD_ACCESS_KEY", keys.CKEDITOR_CLOUD_ACCESS_KEY
)
CKEDITOR_CLOUD_ENVIRONMENT_ID = os.environ.get(
    "CKEDITOR_CLOUD_ENVIRONMENT_ID", keys.CKEDITOR_CLOUD_ENVIRONMENT_ID
)

# Crossref
CROSSREF_DOI_RSC_FEE = 5
CROSSREF_DOI_PREFIX = "10.55277/ResearchHub."
CROSSREF_DOI_SUFFIX_LENGTH = 8
CROSSREF_LOGIN_ID = os.environ.get("CROSSREF_LOGIN_ID", keys.CROSSREF_LOGIN_ID)
CROSSREF_LOGIN_PASSWORD = os.environ.get(
    "CROSSREF_LOGIN_PASSWORD", keys.CROSSREF_LOGIN_PASSWORD
)
CROSSREF_API_URL = (
    "https://doi.crossref.org/servlet/deposit"
    if STAGING or PRODUCTION
    else "https://test.crossref.org/servlet/deposit"
)

# Async Service API Key
ASYNC_SERVICE_API_KEY = os.environ.get(
    "ASYNC_SERVICE_API_KEY", keys.ASYNC_SERVICE_API_KEY or "testapikeyservice"
)

WEB3_NETWORK = os.environ.get("WEB3_NETWORK", "rinkeby")
PROVIDER_URL = os.environ.get("PROVIDER_URL", keys.PROVIDER_URL)
WEB3_KEYSTORE_BUCKET = os.environ.get("WEB3_KEYSTORE_BUCKET", keys.WEB3_KEYSTORE_BUCKET)
WEB3_KEYSTORE_FILE = os.environ.get("WEB3_KEYSTORE_FILE", keys.WEB3_KEYSTORE_FILE)
WEB3_KEYSTORE_PASSWORD = os.environ.get(
    "WEB3_KEYSTORE_PASSWORD", keys.WEB3_KEYSTORE_PASSWORD
)
WEB3_KEYSTORE_ADDRESS = os.environ.get("", keys.WEB3_KEYSTORE_ADDRESS)

try:
    w3 = Web3(Web3.HTTPProvider(PROVIDER_URL))

    if WEB3_NETWORK == "rinkeby":
        from web3.middleware import geth_poa_middleware

        w3.middleware_onion.inject(geth_poa_middleware, layer=0)
except Exception as e:
    log_error(e)
    print(e)

# API Key Settings
API_KEY_CUSTOM_HEADER = "HTTP_RH_API_KEY"


# MJML
MJML_APP_ID = os.environ.get("MJML_APP_ID", keys.MJML_APP_ID)
MJML_SECRET_KEY = os.environ.get("MJML_SECRET_KEY", keys.MJML_SECRET_KEY)
MJML_BACKEND_MODE = "httpserver"
MJML_HTTPSERVERS = [
    {
        "URL": "https://api.mjml.io/v1/render",  # official MJML API
        "HTTP_AUTH": (MJML_APP_ID, MJML_SECRET_KEY),
    },
]


# Transpose API
TRANSPOSE_KEY = os.environ.get("TRANSPOSE_KEY", keys.TRANSPOSE_KEY)

# OpenAlex API
OPENALEX_KEY = os.environ.get("OPENALEX_KEY", keys.OPENALEX_KEY)


REFERRAL_PROGRAM = {
    "REFERER_DISTRIBUTION_TYPE": "REFERRAL_REFERER_EARNINGS",
    "INVITED_DISTRIBUTION_TYPE": "REFERRAL_INVITED_BONUS",
    # Referrer will receive a bonus defined as a percetage of the invited person's earnings.
    # The bonus will be paid by RH
    "REFERER_EARN_PCT": 0.07,
    "INVITED_EARN_AMOUNT": 0,
    # Time period in which referer will receive earnings defined by
    # invited join date + value below
    "ELIGIBLE_TIME_PERIOD_IN_MONTHS": 6,
    # Only pay referrer earnings if invitee earns in one of these transactions
    "ELIGIBLE_TRANSACTIONS": [
        "RhCOMMENT_UPVOTED",
        "RESEARCHHUB_POST_UPVOTED",
        "HYPOTHESIS_UPVOTED",
        "PAPER_UPVOTED",
        "REWARD",
        "PURCHASE",
        "BOUNTY_PAYOUT",
    ],
}


# Grobid service
GROBID_SERVER = "http://34.216.57.131:8000"
if not DEVELOPMENT:
    GROBID_SERVER = "http://172.31.7.56:8000"

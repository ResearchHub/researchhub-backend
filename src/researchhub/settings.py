"""
Django settings for researchhub project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import sys

import requests
import sentry_sdk
import stripe
from corsheaders.defaults import default_headers
from sentry_sdk.integrations.django import DjangoIntegration

APP_ENV = os.environ.get("APP_ENV") or "development"
DEVELOPMENT = "development" in APP_ENV
PRODUCTION = "production" in APP_ENV
STAGING = "staging" in APP_ENV
CELERY_WORKER = os.environ.get("CELERY_WORKER", False)
ELASTIC_APM_OFF = os.environ.get("ELASTIC_APM_OFF", False)
NO_ELASTIC = os.environ.get("NO_ELASTIC")

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

CI = "GITHUB_ACTIONS" in os.environ
CLOUD = PRODUCTION or STAGING or CI
TESTING = ("test" in APP_ENV) or ("test" in sys.argv) or (APP_ENV == "test")
PYTHONPATH = "/var/app/current:$PYTHONPATH"
DJANGO_SETTINGS_MODULE = "researchhub.settings"
ELASTIC_BEANSTALK = APP_ENV in ["production", "staging", "development"]
USE_SILK = os.environ.get("USE_SILK", False)
CONFIG = os.environ.get("CONFIG")

if CLOUD or CONFIG:
    CONFIG_BASE_DIR = "config"
    from config import db, keys
else:
    CONFIG_BASE_DIR = "config_local"
    from config_local import db, keys

if DEVELOPMENT or TESTING:
    BASE_FRONTEND_URL = "http://localhost:3000"
elif PRODUCTION:
    BASE_FRONTEND_URL = "https://www.researchhub.com"
elif CLOUD:
    BASE_FRONTEND_URL = "https://www.staging.researchhub.com"

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
        "verbose": {
            "format": "{asctime} {levelname} {name} [{filename}:{lineno}] {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "root": {
        "level": "INFO",
        "handlers": ["console"],
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": os.environ.get("DJANGO_LOG_LEVEL", "ERROR"),
            "propagate": False,
        },
    },
}

# Django Debug Toolbar
USE_DEBUG_TOOLBAR = os.environ.get("USE_DEBUG_TOOLBAR", "False") == "True"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", keys.SECRET_KEY)

# python manage.py check --deploy
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
if not (PRODUCTION or STAGING):
    DEBUG = True

ALLOWED_HOSTS = [
    ".elasticbeanstalk.com",
    ".researchhub.com",
    "127.0.0.1",  # localhost
    "localhost",
    "staging.researchhub.com",
    "www.staging.researchhub.com",
    r"^https:\/\/(\w)*[-]*(researchhub+)([-](\w)*)*(.vercel.app){1}/",
    r"https:\/\/(\w)*[-]*(researchhub+)([-](\w)*)*(.vercel.app){1}",
]

if ELASTIC_BEANSTALK:
    # Prefer X-Forwarded-Host header over Host header.
    # See: https://docs.djangoproject.com/en/5.1/ref/settings/#use-x-forwarded-host
    USE_X_FORWARDED_HOST = True

    # This is for health checks
    try:
        EC2_METADATA_HEADERS = {"X-aws-ec2-metadata-token-ttl-seconds": "21600"}

        EC2_METADATA_TOKEN = requests.put(
            "http://169.254.169.254/latest/api/token",
            timeout=0.01,
            headers=EC2_METADATA_HEADERS,
        ).text

        EC2_METADATA_TOKEN_HEADER = {"X-aws-ec2-metadata-token": EC2_METADATA_TOKEN}

        ALLOWED_HOSTS.append(
            requests.get(
                "http://169.254.169.254/latest/meta-data/local-ipv4",
                timeout=0.01,
                headers=EC2_METADATA_TOKEN_HEADER,
            ).text
        )

    except requests.exceptions.RequestException:
        pass

DJANGO_ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "")
if DJANGO_ALLOWED_HOSTS:
    hosts = [host.strip() for host in DJANGO_ALLOWED_HOSTS.split(",")]
    ALLOWED_HOSTS += hosts

    # The AWS load balancers fronting the Beanstalk environment set the Host
    # header to the load balancer's IP address. Therefore we also add the
    # resolved IP addresses to the allowed hosts.
    for host in hosts:
        if host.endswith("elasticbeanstalk.com"):
            import socket

            try:
                ips = list({info[4][0] for info in socket.getaddrinfo(host, None)})
            except Exception:
                pass
            ALLOWED_HOSTS += ips

CORS_ALLOW_HEADERS = (
    *default_headers,
    "X-organization-id",
)

# Cors
CORS_ORIGIN_WHITELIST = [
    "http://localhost:3000",
    "https://localhost:3000",
    "https://dev.researchhub.com",
    "https://www.researchhub.com",
    "https://researchhub.com",
    "https://staging.researchhub.com",
    "https://www.staging.researchhub.com",
    "https://experiment.staging.researchhub.com",
    "https://www.experiment.staging.researchhub.com",
    "http://127.0.0.1:3000",
]

CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https:\/\/[\w-]+researchhub\.vercel\.app$",
    r"^https:\/\/(\w)*[-]*(researchhub+)([-](\w)*)*(.vercel.app){1}",
    r"^https:\/\/(\w)*[-]*(researchhub+)([-](\w)*)*(.vercel.app){1}/",
]

# Health check

HEALTH_CHECK_TOKEN = os.environ.get("HEALTH_CHECK_TOKEN", keys.HEALTH_CHECK_TOKEN)

# Application definition

INSTALLED_APPS = [
    # Daphne needs to be first
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.sites",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "django_filters",
    # https://github.com/django-extensions/django-extensions
    "django_extensions",
    # CORS
    "corsheaders",
    # Postgres
    "django.contrib.postgres",
    # Rest framework
    "rest_framework",
    "rest_framework_api_key",
    # Authentication
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "rest_framework.authtoken",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    # Storage
    "storages",
    # Search
    "django_elasticsearch_dsl",
    # Emails
    "django_ses",
    "django_inlinecss",
    # Channels
    "channels",
    # Django Celery Results
    "django_celery_results",
    # MJML
    "mjml",
    # Custom apps
    "analytics",
    "citation",
    "discussion",
    "feed",
    "institution",
    "topic",
    "ethereum",
    "hub",
    "invite",
    "mailing_list",
    "note",
    "notification",
    "oauth",
    "paper",
    "purchase",
    "referral",
    "reputation",
    "researchhub",
    "researchhub_case",
    "researchhub_comment",
    "researchhub_document",
    "researchhub_access_group",
    "search",
    "tag",
    "user",
    "new_feature_release",
    "review",
    "organizations",
    "user_saved",
    # Health checks
    "health_check",
    "health_check.db",
    "health_check.cache",
]

SITE_ID = 1

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "researchhub.middleware.csrf_disable.DisableCSRF",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
if USE_DEBUG_TOOLBAR:
    print("Using Debug Toolbar")
    DEBUG_TOOLBAR_CONFIG = {
        "SHOW_TOOLBAR_CALLBACK": lambda request: True,
    }

    INSTALLED_APPS += ["debug_toolbar"]
    MIDDLEWARE += ["debug_toolbar.middleware.DebugToolbarMiddleware"]
    INTERNAL_IPS = [
        "127.0.0.1",
    ]

if USE_SILK:
    INSTALLED_APPS += ["silk", "dbbackup"]

    MIDDLEWARE += [
        "silk.middleware.SilkyMiddleware",
    ]

    DBBACKUP_STORAGE = "django.core.files.storage.FileSystemStorage"
    DBBACKUP_STORAGE_OPTIONS = {"location": "backups"}
    SILKY_META = True
    SILKY_ANALYZE_QUERIES = True
    SILKY_EXPLAIN_FLAGS = {"format": "JSON", "costs": True}
    SILKY_PYTHON_PROFILER = True

    def silky_capture(request):
        return "test_get_unified_documents" in request.path

    SILKY_PYTHON_PROFILER_FUNC = silky_capture

ROOT_URLCONF = "researchhub.urls"

FILE_UPLOAD_MAX_MEMORY_SIZE = 26214400 * 24.1  # ~655MB max data allowed

PAGINATION_PAGE_SIZE = 10

DEFAULT_RENDERER_CLASSES = ("rest_framework.renderers.JSONRenderer",)

if DEBUG:
    DEFAULT_RENDERER_CLASSES = DEFAULT_RENDERER_CLASSES + (
        "rest_framework.renderers.BrowsableAPIRenderer",
    )

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "researchhub.middleware.ApiTokenSession.UserApiTokenAuth",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
        # 'rest_framework.permissions.AllowAny',  # FOR TESTING ONLY
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "DEFAULT_RENDERER_CLASSES": DEFAULT_RENDERER_CLASSES,
    "PAGE_SIZE": PAGINATION_PAGE_SIZE,
    "TEST_REQUEST_RENDERER_CLASSES": [
        "rest_framework.renderers.MultiPartRenderer",
        "rest_framework.renderers.JSONRenderer",
        "utils.renderers.PlainTextRenderer",
    ],
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "50/minute",
    },
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
}


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "researchhub.wsgi.application"


# Authentication

AUTH_USER_MODEL = "user.User"

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
)

OAUTH_METHOD = "token"

REST_AUTH_REGISTER_SERIALIZERS = {
    "REGISTER_SERIALIZER": "user.serializers.RegisterSerializer",
}

REST_AUTH_SERIALIZERS = {
    "PASSWORD_RESET_SERIALIZER": "user.custom_allauth.CustomPasswordResetSerializer"
}


# Django AllAuth setup
# https://django-allauth.readthedocs.io/en/latest/configuration.html

# See: https://docs.allauth.org/en/latest/account/rate_limits.html
ACCOUNT_RATE_LIMITS = {
    "login": "5/m/ip",
    "login_failed": "5/5m/ip,5/5m/key",
}

ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_ADAPTER = "user.custom_allauth.CustomAccountAdapter"
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = False
if STAGING or PRODUCTION:
    ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"
SOCIALACCOUNT_ADAPTER = "oauth.adapters.SocialAccountAdapter"
SOCIALACCOUNT_EMAIL_VERIFICATION = "none"
SOCIALACCOUNT_EMAIL_REQUIRED = False
SOCIALACCOUNT_QUERY_EMAIL = True


GOOGLE_REDIRECT_URL = "http://localhost:8000/auth/google/login/callback/"
GOOGLE_YOLO_REDIRECT_URL = "http://localhost:8000/auth/google/yolo/callback/"
if PRODUCTION:
    GOOGLE_REDIRECT_URL = (
        "https://backend.prod.researchhub.com/auth/google/login/callback/"
    )
    GOOGLE_YOLO_REDIRECT_URL = (
        "https://backend.prod.researchhub.com/auth/google/yolo/callback/"
    )
if STAGING:
    GOOGLE_REDIRECT_URL = (
        "https://backend.staging.researchhub.com/auth/google/login/callback/"
    )
    GOOGLE_YOLO_REDIRECT_URL = (
        "https://backend.staging.researchhub.com/auth/google/yolo/callback/"
    )


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DB_NAME = os.environ.get("DB_NAME", db.NAME)
DB_HOST = os.environ.get("DB_HOST", db.HOST)
DB_PORT = os.environ.get("DB_PORT", db.PORT)
DB_USER = os.environ.get("DB_USER", db.USER)
DB_PASS = os.environ.get("DB_PASS", db.PASS)

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": DB_NAME,
        "HOST": DB_HOST,
        "PORT": DB_PORT,
        "USER": DB_USER,
        "PASSWORD": DB_PASS,
        "TEST": {
            "NAME": "test_researchhub",
        },
    }
}

if ELASTIC_BEANSTALK:
    # Connection pooling
    # See: https://docs.djangoproject.com/en/5.1/ref/databases/#connection-pool
    # See psycopg3 connection pool docs:
    # https://www.psycopg.org/psycopg3/docs/api/pool.html
    DB_POOL_MIN_SIZE = int(os.environ.get("DB_POOL_MIN_SIZE", 10))
    DB_POOL_MAX_SIZE = int(os.environ.get("DB_POOL_MAX_SIZE", 50))

    DATABASES["default"].setdefault("OPTIONS", {})
    DATABASES["default"]["OPTIONS"]["pool"] = {
        "min_size": DB_POOL_MIN_SIZE,
        "max_size": DB_POOL_MAX_SIZE,
    }

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation."
            "UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": ("django.contrib.auth.password_validation." "MinimumLengthValidator"),
    },
    {
        "NAME": ("django.contrib.auth.password_validation." "CommonPasswordValidator"),
    },
    {
        "NAME": ("django.contrib.auth.password_validation." "NumericPasswordValidator"),
    },
    {"NAME": ("user.validators." "SymbolValidator")},
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATICFILES_DIRS = ["stylesheets"]

# AWS

AWS_REGION_NAME = os.environ.get("AWS_REGION_NAME", keys.AWS_REGION_NAME)

if not (CLOUD or TESTING) and os.environ.get("AWS_PROFILE") is None:
    # Set AWS profile for local development
    os.environ["AWS_PROFILE"] = keys.AWS_PROFILE

# AWS Lambda

GHOSTSCRIPT_LAMBDA_ARN = os.environ.get(
    "GHOSTSCRIPT_LAMBDA_ARN",
    keys.GHOSTSCRIPT_LAMBDA_ARN,
)

ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7
ACCOUNT_EMAIL_SUBJECT_PREFIX = "ResearchHub | "
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"
EMAIL_DOMAIN = (
    "researchhub.com" if APP_ENV == "production" else f"{APP_ENV}.researchhub.com"
)
DEFAULT_FROM_EMAIL = f"noreply@{EMAIL_DOMAIN}"

# Storage
STORAGES = {
    "default": {
        "BACKEND": (
            "storages.backends.s3boto3.S3Boto3Storage"
            if not TESTING
            else "django.core.files.storage.FileSystemStorage"
        ),
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

AWS_QUERYSTRING_EXPIRE = 604800

AWS_STORAGE_BUCKET_NAME = os.environ.get(
    "AWS_STORAGE_BUCKET_NAME", keys.AWS_STORAGE_BUCKET_NAME
)

AWS_S3_CUSTOM_DOMAIN = os.environ.get("AWS_S3_CUSTOM_DOMAIN", keys.AWS_S3_CUSTOM_DOMAIN)

AWS_S3_REGION_NAME = AWS_REGION_NAME

AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None

# Assets
ASSETS_BASE_URL = os.environ.get(
    "ASSETS_BASE_URL", "https://assets.staging.researchhub.com"
)

# Email

AWS_SES_REGION_NAME = AWS_REGION_NAME
AWS_SES_REGION_ENDPOINT = os.environ.get(
    "AWS_SES_REGION_ENDPOINT", keys.AWS_SES_REGION_ENDPOINT
)

EMAIL_BACKEND = "django_ses.SESBackend"
if TESTING:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

EMAIL_WHITELIST = [
    email.strip()
    for email in os.environ.get("EMAIL_WHITELIST", keys.EMAIL_WHITELIST).split(",")
]

SIFT_MODERATION_WHITELIST = [
    user_id.strip()
    for user_id in os.environ.get("SIFT_MODERATION_WHITELIST", "").split(",")
]

# Persona
PERSONA_WEBHOOK_SECRET = os.environ.get(
    "PERSONA_WEBHOOK_SECRET", keys.PERSONA_WEBHOOK_SECRET
)

# Sentry

SENTRY_ENVIRONMENT = APP_ENV

if PRODUCTION or STAGING:

    def before_send(event, hint):
        log_record = hint.get("log_record")
        if log_record and "Invalid HTTP_HOST header" in log_record.message:
            return None
        return event

    sentry_sdk.init(
        dsn=os.environ.get("SENTRY_DSN", keys.SENTRY_DSN),
        before_send=before_send,
        integrations=[DjangoIntegration()],
        environment=SENTRY_ENVIRONMENT,
    )

# Stripe
STRIPE_SECRET_KEY = os.environ.get("STRIPE_SECRET_KEY", keys.STRIPE_SECRET_KEY)
STRIPE_WEBHOOK_SIGNING_SECRET = os.environ.get(
    "STRIPE_WEBHOOK_SIGNING_SECRET", keys.STRIPE_WEBHOOK_SIGNING_SECRET
)

stripe.api_key = STRIPE_SECRET_KEY
stripe.api_version = "2024-09-30.acacia"

# Search (Elastic)

ELASTICSEARCH_HOST = os.environ.get("ELASTICSEARCH_HOST", keys.ELASTICSEARCH_HOST)

ELASTICSEARCH_DSL = {
    "default": {
        "hosts": ELASTICSEARCH_HOST if ELASTICSEARCH_HOST else "http://localhost:9200",
        "timeout": 30,
    },
}

if PRODUCTION:
    ELASTICSEARCH_DSL = {
        "default": {
            "hosts": ELASTICSEARCH_HOST,  # noqa: E501
            "port": 443,
            "use_ssl": True,
            "max_retries": 5,
        },
    }

if STAGING:
    ELASTICSEARCH_DSL = {
        "default": {
            "hosts": ELASTICSEARCH_HOST,  # noqa: E501
            "port": 443,
            "use_ssl": True,
            "max_retries": 5,
        },
    }


ELASTICSEARCH_AUTO_REINDEX = True
ELASTICSEARCH_DSL_PARALLEL = True
ELASTICSEARCH_DSL_SIGNAL_PROCESSOR = "search.celery.CelerySignalProcessor"


# Web3
# https://web3py.readthedocs.io/en/stable/

# Mainnet
WEB3_RSC_ADDRESS = os.environ.get("WEB3_RSC_ADDRESS", keys.WEB3_RSC_ADDRESS)
WEB3_BASE_RSC_ADDRESS = os.environ.get(
    "WEB3_BASE_RSC_ADDRESS", keys.WEB3_BASE_RSC_ADDRESS
)

# Provider URLs for each network
WEB3_PROVIDER_URL = os.environ.get("WEB3_PROVIDER_URL", keys.WEB3_PROVIDER_URL)
WEB3_BASE_PROVIDER_URL = os.environ.get(
    "WEB3_BASE_PROVIDER_URL", keys.WEB3_BASE_PROVIDER_URL
)

# Redis
# redis://:password@hostname:port/db_number

REDIS_HOST = os.environ.get("REDIS_HOST", "localhost")
REDIS_PORT = os.environ.get("REDIS_PORT", "6379")

# Cache Settings
if TESTING:
    CACHES = {
        "default": {
            "BACKEND": "researchhub.TestCache.TestCache",
            "LOCATION": f"{REDIS_HOST}:{REDIS_PORT}",
            "KEY_PREFIX": APP_ENV,
        },
    }
else:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.redis.RedisCache",
            "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/1",
            "KEY_PREFIX": APP_ENV,
        },
    }

# Celery

CELERY_BROKER_URL = "redis://{}:{}/0".format(REDIS_HOST, REDIS_PORT)
CELERY_RESULT_BACKEND = "db+postgresql://{}:{}@{}:{}/{}".format(
    DB_USER, DB_PASS, DB_HOST, DB_PORT, DB_NAME
)
CELERY_TIMEZONE = "UTC"
CELERY_RESULT_BACKEND = "django-db"
CELERY_TASK_TRACK_STARTED = True
CELERY_RESULT_EXTENDED = True
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_TASK_DEFAULT_QUEUE = "default"
CELERY_TASK_IGNORE_RESULT = True

REDBEAT_REDIS_URL = "redis://{}:{}/2".format(REDIS_HOST, REDIS_PORT)
REDBEAT_KEY_PREFIX = f"{APP_ENV}_redbeat_"

# Django Channels
ASGI_APPLICATION = "researchhub.asgi.application"
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(REDIS_HOST, REDIS_PORT)],
        },
    },
}

# APM

elastic_token = os.environ.get("ELASTIC_APM_SECRET_TOKEN", "")
if elastic_token:
    if not CELERY_WORKER:
        INSTALLED_APPS += [
            # Monitoring
            "elasticapm.contrib.django",
        ]
    if not CELERY_WORKER and not TESTING:
        MIDDLEWARE = [
            "elasticapm.contrib.django.middleware.TracingMiddleware",
        ] + MIDDLEWARE
    ELASTIC_APM = {
        # Set required service name. Allowed characters:
        # # a-z, A-Z, 0-9, -, _, and space
        "SERVICE_NAME": f"researchhub-{APP_ENV}",
        # Use if APM Server requires a token
        "SECRET_TOKEN": os.environ.get("ELASTIC_APM_SECRET_TOKEN", ""),
        # Set custom APM Server URL (default: http://localhost:8200)
        "SERVER_URL": os.environ.get("APM_URL", keys.APM_URL),  # noqa
        "ENVIRONMENT": APP_ENV,
        "DJANGO_AUTOINSERT_MIDDLEWARE": False,
        "DISABLE_SEND": CELERY_WORKER or TESTING,
        "TRANSACTION_SAMPLE_RATE": 0.1,
        "PROCESSORS": (
            "elasticapm.processors.sanitize_stacktrace_locals",
            "elasticapm.processors.sanitize_http_request_cookies",
            "elasticapm.processors.sanitize_http_headers",
            "elasticapm.processors.sanitize_http_wsgi_env",
            "elasticapm.processors.sanitize_http_request_body",
        ),
    }

# MailChimp
MAILCHIMP_SERVER = "us4"
MAILCHIMP_LIST_ID = os.environ.get("MAILCHIMP_LIST_ID", keys.MAILCHIMP_LIST_ID)

MORALIS_API_KEY = os.environ.get("MORALIS_API_KEY", keys.MORALIS_API_KEY)

# Recaptcha
RECAPTCHA_VERIFY_URL = "https://www.google.com/recaptcha/api/siteverify"
RECAPTCHA_SECRET_KEY = os.environ.get("RECAPTCHA_SECRET_KEY", keys.RECAPTCHA_SECRET_KEY)

# Sift Science
SIFT_ACCOUNT_ID = os.environ.get("SIFT_ACCOUNT_ID", keys.SIFT_ACCOUNT_ID)
SIFT_REST_API_KEY = os.environ.get("SIFT_REST_API_KEY", keys.SIFT_REST_API_KEY)
SIFT_WEBHOOK_SECRET_KEY = os.environ.get(
    "SIFT_WEBHOOK_SECRET_KEY", keys.SIFT_WEBHOOK_SECRET_KEY
)

# Amplitude
AMPLITUDE_API_KEY = os.environ.get("AMPLITUDE_API_KEY", keys.AMPLITUDE_API_KEY)

if STAGING or PRODUCTION:
    GDAL_LIBRARY_PATH = "/home/ec2-user/miniconda3/lib/libgdal.so"

# Killswitch Variables
SERIALIZER_SWITCH = os.environ.get("SERIALIZER_SWITCH", True)

# CKEditor Cloud Services
CKEDITOR_CLOUD_ACCESS_KEY = os.environ.get(
    "CKEDITOR_CLOUD_ACCESS_KEY", keys.CKEDITOR_CLOUD_ACCESS_KEY
)
CKEDITOR_CLOUD_ENVIRONMENT_ID = os.environ.get(
    "CKEDITOR_CLOUD_ENVIRONMENT_ID", keys.CKEDITOR_CLOUD_ENVIRONMENT_ID
)

# Crossref
CROSSREF_DOI_RSC_FEE = 5
CROSSREF_DOI_PREFIX = "10.55277/researchhub."
CROSSREF_DOI_RHJ_PREFIX = "10.55277/rhj."
CROSSREF_DOI_SUFFIX_LENGTH = 8
CROSSREF_LOGIN_ID = os.environ.get("CROSSREF_LOGIN_ID", keys.CROSSREF_LOGIN_ID)
CROSSREF_LOGIN_PASSWORD = os.environ.get(
    "CROSSREF_LOGIN_PASSWORD", keys.CROSSREF_LOGIN_PASSWORD
)
CROSSREF_API_URL = (
    f"https://{'doi' if PRODUCTION else 'test'}.crossref.org/servlet/deposit"
)

WEB3_NETWORK = os.environ.get("WEB3_NETWORK", keys.WEB3_NETWORK)
WEB3_KEYSTORE_SECRET_ID = os.environ.get(
    "WEB3_KEYSTORE_SECRET_ID", keys.WEB3_KEYSTORE_SECRET_ID
)
WEB3_KEYSTORE_PASSWORD_SECRET_ID = os.environ.get(
    "WEB3_KEYSTORE_PASSWORD_SECRET_ID", keys.WEB3_KEYSTORE_PASSWORD_SECRET_ID
)
WEB3_WALLET_ADDRESS = os.environ.get("WEB3_WALLET_ADDRESS", keys.WEB3_WALLET_ADDRESS)


# API Key Settings
API_KEY_CUSTOM_HEADER = "HTTP_RH_API_KEY"


# MJML
MJML_APP_ID = os.environ.get("MJML_APP_ID", keys.MJML_APP_ID)
MJML_SECRET_KEY = os.environ.get("MJML_SECRET_KEY", keys.MJML_SECRET_KEY)
MJML_BACKEND_MODE = "httpserver"
MJML_HTTPSERVERS = [
    {
        "URL": "https://api.mjml.io/v1/render",  # official MJML API
        "HTTP_AUTH": (MJML_APP_ID, MJML_SECRET_KEY),
    },
]


# Transpose API
TRANSPOSE_KEY = os.environ.get("TRANSPOSE_KEY", keys.TRANSPOSE_KEY)

# OpenAlex API
OPENALEX_KEY = os.environ.get("OPENALEX_KEY", keys.OPENALEX_KEY)

# Etherscan API Key
ETHERSCAN_API_KEY = os.environ.get("ETHERSCAN_API_KEY", keys.ETHERSCAN_API_KEY)

# CoinGecko API Key
COIN_GECKO_API_KEY = os.environ.get("COIN_GECKO_API_KEY", keys.COIN_GECKO_API_KEY)

# Endaoment Account ID
ENDAOMENT_ACCOUNT_ID = os.environ.get("ENDAOMENT_ACCOUNT_ID", keys.ENDAOMENT_ACCOUNT_ID)

# ResearchHub Journal ID
RESEARCHHUB_JOURNAL_ID = os.environ.get(
    "RESEARCHHUB_JOURNAL_ID", keys.RESEARCHHUB_JOURNAL_ID
)
